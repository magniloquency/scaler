# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python Linter And Unittest

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Python 3.10
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.10"

      - name: Install necessary component
        run: |
          sudo apt update -y
          sudo apt upgrade -y
          sudo DEBIAN_FRONTEND=noninteractive sudo apt install -y tzdata
          sudo apt install cmake clang curl pkg-config g++-14 -y

      - name: Make scripts executable
        run: |
          sudo chmod 755 ./scripts/download_install_dependencies.sh
          sudo chmod 755 ./scripts/build.sh

      - name: Cache Boost
        id: cache-boost
        uses: actions/cache@v4
        with:
          path: boost
          key: ${{ runner.os }}-cache-boost

      - name: Download Boost if not cached
        if: steps.cache-boost.outputs.cache-hit != 'true'
        run: |
          sudo ./scripts/download_install_dependencies.sh boost compile

      - name: Install Boost
        run: |
          sudo ./scripts/download_install_dependencies.sh boost install

      - name: Cache Capnp
        id: cache-capnp
        uses: actions/cache@v4
        with:
          path: capnp
          key: ${{ runner.os }}-cache-capnp

      - name: Download and Compile capnp if not cached
        if: steps.cache-capnp.outputs.cache-hit != 'true'
        run: |
          sudo ./scripts/download_install_dependencies.sh capnp compile

      - name: Install Capnp
        run: |
          sudo ./scripts/download_install_dependencies.sh capnp install

      - name: Build and test C++ Components

        # TODO: Figure out how to run man-in-the-middle tests in CI
        run: |
          CXX=$(which g++-14) GTEST_FILTER="-*Mitm*" ./scripts/build.sh

      - name: Install Python Dependent Packages
        run: |
          pip install uv
          uv pip install --system --upgrade pip
          uv pip install --system flake8 pyproject-flake8 mypy
          uv pip install --system -r pyproject.toml --all-extras

      - name: Lint With flake8
        run: |
          pflake8 .

      - name: Lint With MyPy
        run: |
          mypy --install-types --non-interactive .

      - name: Run Python Unittests
        run: |
          python -m unittest discover -v tests

      - name: Run Python Examples
        run: |
          uv pip install --system -r examples/applications/requirements_applications.txt
          for example in "./examples"/*.py; do
            echo "Running $example"
            PYTHONPATH=. python $example
          done
          for example in "./examples/applications"/*.py; do
            echo "Running $example"
            PYTHONPATH=. python $example
          done

  build-win:
    runs-on: windows-latest

    steps:

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Cache Boost
        id: cache-boost-windows
        uses: actions/cache@v4
        with:
          path: boost
          key: ${{ runner.os }}-cache-boost

      - name: Download Boost if not cached
        if: steps.cache-boost-windows.outputs.cache-hit != 'true'
        run: |
          ./scripts/download_install_dependencies.ps1 boost compile

      - name: Install Boost
        run: |
          ./scripts/download_install_dependencies.ps1 boost install

      - name: Cache Capnp
        id: cache-capnp-windows
        uses: actions/cache@v4
        with:
          path: capnp
          key: ${{ runner.os }}-cache-capnp

      - name: Download and Compile capnp if not cached
        if: steps.cache-capnp-windows.outputs.cache-hit != 'true'
        run: |
          ./scripts/download_install_dependencies.ps1 capnp compile

      - name: Install Capnp
        run: |
          ./scripts/download_install_dependencies.ps1 capnp install

      - name: Build and test C++ Components
        run: |
          cmake --preset windows-x64
          cmake --build --preset windows-x64 --config Debug
          cmake --install build_windows_x64 --config Debug

  build:
    runs-on: ubuntu-latest
    needs: [build-linux, build-win]

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
